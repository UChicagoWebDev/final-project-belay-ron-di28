{"ast":null,"code":"var _jsxFileName = \"/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/ChannelList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChannelList({}) {\n  _s();\n  let navigate = useNavigate();\n  const [channels, setChannels] = useState([]);\n  const [unreadMessages, setUnreadMessages] = useState({});\n  const [selectedChannelId, setSelectedChannelId] = useState(null);\n  const apiKey = localStorage.getItem('api_key');\n  const goToProfile = () => {\n    navigate('/profile');\n  };\n  useEffect(() => {\n    fetch('/api/channels', {\n      method: 'GET',\n      headers: {\n        'API-Key': apiKey\n      }\n    }).then(response => response.json()).then(data => {\n      setChannels(data);\n    }).catch(error => console.error('Error fetching channels:', error));\n    fetch('/api/channels/access', {\n      method: 'GET',\n      headers: {\n        'API-Key': apiKey\n      }\n    }).then(response => response.json()).then(data => {\n      const unreadCounts = {};\n      data.forEach(channel => {\n        unreadCounts[channel.channel_id] = channel.unread_messages;\n      });\n      setUnreadMessages(unreadCounts);\n    }).catch(error => console.error('Error fetching unread messages:', error));\n  }, []); // This effect runs once on component mount\n\n  const selectChannel = async channelId => {\n    setSelectedChannelId(channelId);\n    navigate(`/channels/${channelId}`);\n    try {\n      const response = await fetch(`/api/channels/${channelId}/access`, {\n        method: 'POST',\n        headers: {\n          'API-Key': apiKey\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.error('Error updating last message seen:', error);\n    }\n  };\n  const fetchChannels = () => {\n    fetch('/api/channels', {\n      method: 'GET',\n      headers: {\n        'API-Key': apiKey\n      }\n    }).then(response => response.json()).then(data => setChannels(data)).catch(error => console.error('Error fetching channels:', error));\n  };\n  const handleCreateChannel = async () => {\n    const channelName = prompt('Enter new channel name:');\n    if (!channelName) return;\n    try {\n      const response = await fetch('/api/channels/new', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'API-Key': apiKey\n        },\n        body: JSON.stringify({\n          name: channelName\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create channel');\n      }\n      fetchChannels();\n    } catch (error) {\n      console.error('Error creating channel:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"channel-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"channel-header\",\n      children: \"Channels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), channels.map(channel => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `channel-item ${channel.id === selectedChannelId ? 'active' : ''}`,\n      onClick: () => selectChannel(channel.id),\n      children: [channel.name, unreadMessages[channel.id] ? ` (${unreadMessages[channel.id]} unread)` : '']\n    }, channel.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateChannel,\n      children: \"Create New Channel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goToProfile,\n      children: \"Go to Profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n_s(ChannelList, \"DD3PmOEucocsCkWEbTGZsTd1tcQ=\", false, function () {\n  return [useNavigate];\n});\n_c = ChannelList;\nexport default ChannelList;\nvar _c;\n$RefreshReg$(_c, \"ChannelList\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","ChannelList","_s","navigate","channels","setChannels","unreadMessages","setUnreadMessages","selectedChannelId","setSelectedChannelId","apiKey","localStorage","getItem","goToProfile","fetch","method","headers","then","response","json","data","catch","error","console","unreadCounts","forEach","channel","channel_id","unread_messages","selectChannel","channelId","ok","Error","log","fetchChannels","handleCreateChannel","channelName","prompt","body","JSON","stringify","name","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","id","onClick","_c","$RefreshReg$"],"sources":["/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/ChannelList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nfunction ChannelList({}) {\n    let navigate = useNavigate();\n  \n    const [channels, setChannels] = useState([]);\n    const [unreadMessages, setUnreadMessages] = useState({});\n    const [selectedChannelId, setSelectedChannelId] = useState(null);\n  \n    const apiKey = localStorage.getItem('api_key');\n    \n    const goToProfile = () => {navigate('/profile');};\n\n    useEffect(() => {\n        fetch('/api/channels', {\n            method: 'GET', \n            headers: {\n                'API-Key': apiKey\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            setChannels(data);\n        })\n        .catch(error => console.error('Error fetching channels:', error));\n\n        fetch('/api/channels/access', {\n            method: 'GET',\n            headers: {\n                'API-Key': apiKey\n            },\n        })\n        .then(response => response.json())\n        .then(data => {\n            const unreadCounts = {};\n            data.forEach(channel => {\n            unreadCounts[channel.channel_id] = channel.unread_messages;\n            });\n            setUnreadMessages(unreadCounts);\n        })\n        .catch(error => console.error('Error fetching unread messages:', error));\n    }, []); // This effect runs once on component mount\n\n\n    const selectChannel = async (channelId) => {\n        setSelectedChannelId(channelId);\n        navigate(`/channels/${channelId}`);\n    \n        try {\n        const response = await fetch(`/api/channels/${channelId}/access`, {\n            method: 'POST',\n            headers: {\n                'API-Key': apiKey\n            }\n        });\n    \n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n    \n        const data = await response.json();\n        console.log(data); \n        } catch (error) {\n            console.error('Error updating last message seen:', error);\n        }\n    };\n\n    const fetchChannels = () => {\n        fetch('/api/channels', {\n            method: 'GET', \n            headers: {\n                'API-Key': apiKey\n            },\n        })\n        .then(response => response.json())\n        .then(data => setChannels(data))\n        .catch(error => console.error('Error fetching channels:', error));\n    };\n\n    const handleCreateChannel = async () => {\n        const channelName = prompt('Enter new channel name:');\n        if (!channelName) return; \n\n        try {\n        const response = await fetch('/api/channels/new', { \n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            'API-Key': apiKey\n            },\n            body: JSON.stringify({ name: channelName }),\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to create channel');\n        }\n        fetchChannels();\n        } catch (error) {\n        console.error('Error creating channel:', error);\n        }\n    };\n\n    return (\n        <div className=\"channel-list\">\n        <h2 className=\"channel-header\">Channels</h2>\n        {channels.map(channel => (\n            <div className={`channel-item ${channel.id === selectedChannelId ? 'active' : ''}`} key={channel.id} onClick={() => selectChannel(channel.id)}>\n            {channel.name}\n            {unreadMessages[channel.id] ? ` (${unreadMessages[channel.id]} unread)` : ''}\n            </div>\n        ))}\n        <button onClick={handleCreateChannel}>Create New Channel</button>\n        <button onClick={goToProfile}>Go to Profile</button>\n        </div>\n    );\n}\n\nexport default ChannelList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function MessageList(_ref){let{currentChannel,setSelectedMessageId}=_ref;const[messages,setMessages]=useState([]);const[newMessage,setNewMessage]=useState('');const[hoveredMessageId,setHoveredMessageId]=useState(null);const[showReactionMenuForMessageId,setShowReactionMenuForMessageId]=useState(null);const apiKey=localStorage.getItem('api_key');// Assuming the API key is stored in localStorage\nuseEffect(()=>{if(!currentChannel)return;// Don't fetch if no channel is selected\nfetch(\"/api/channels/\".concat(currentChannel,\"/messages\"),{method:'GET',headers:{'API-Key':apiKey// Assuming the API key is sent as a Bearer token\n}}).then(response=>response.json()).then(data=>{setMessages(data);}).catch(error=>console.error('Error fetching messages:',error));},[currentChannel]);// Refetch messages when currentChannel changes\nconst handleSubmit=async e=>{e.preventDefault();if(!newMessage.trim())return;// Prevent sending empty messages\ntry{const response=await fetch(\"/api/channels/\".concat(currentChannel,\"/messages\"),{method:'POST',headers:{'Content-Type':'application/json','API-Key':apiKey// Assuming the API key is sent as a Bearer token\n},body:JSON.stringify({message:newMessage})});if(!response.ok){throw new Error('Failed to post message');}setNewMessage('');// Clear the input field on successful message post\n// Consider refetching messages for the current channel to show the new message\n}catch(error){console.error('Error posting message:',error);}};const handleReplyClick=messageId=>{// Set the selected message ID to open the replies panel\nsetSelectedMessageId(messageId);};const handleAddReaction=(messageId,emoji)=>{console.log(\"Adding '\".concat(emoji,\"' reaction to message \").concat(messageId));// Send the emoji reaction to your backend\nsetShowReactionMenuForMessageId(null);// Optionally close the menu\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"message-list\",children:[messages.map(msg=>/*#__PURE__*/_jsxs(\"div\",{className:\"message-item\",onMouseEnter:()=>setHoveredMessageId(msg.id),onMouseLeave:()=>setHoveredMessageId(null),children:[/*#__PURE__*/_jsxs(\"strong\",{children:[msg.name,\":\"]}),\" \",msg.body,msg.num_replies>0&&/*#__PURE__*/_jsxs(\"div\",{onClick:()=>handleReplyClick(msg.id),children:[msg.num_replies,\" of replies\"]}),hoveredMessageId===msg.id&&/*#__PURE__*/_jsxs(\"div\",{className:\"message-actions\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleReplyClick(msg.id),children:\"Reply to Thread\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowReactionMenuForMessageId(showReactionMenuForMessageId===msg.id?null:msg.id),children:\"Add Reaction\"}),showReactionMenuForMessageId===msg.id&&/*#__PURE__*/_jsxs(\"div\",{className:\"reaction-menu\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAddReaction(msg.id,'‚ù§Ô∏è'),children:\"\\u2764\\uFE0F\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAddReaction(msg.id,'üòä'),children:\"\\uD83D\\uDE0A\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAddReaction(msg.id,'üò¢'),children:\"\\uD83D\\uDE22\"})]})]})]},msg.id)),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"message-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newMessage,onChange:e=>setNewMessage(e.target.value),placeholder:\"Write a message...\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Send\"})]})]});}export default MessageList;","map":{"version":3,"names":["React","useState","useEffect","jsxs","_jsxs","jsx","_jsx","MessageList","_ref","currentChannel","setSelectedMessageId","messages","setMessages","newMessage","setNewMessage","hoveredMessageId","setHoveredMessageId","showReactionMenuForMessageId","setShowReactionMenuForMessageId","apiKey","localStorage","getItem","fetch","concat","method","headers","then","response","json","data","catch","error","console","handleSubmit","e","preventDefault","trim","body","JSON","stringify","message","ok","Error","handleReplyClick","messageId","handleAddReaction","emoji","log","className","children","map","msg","onMouseEnter","id","onMouseLeave","name","num_replies","onClick","onSubmit","type","value","onChange","target","placeholder"],"sources":["/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/MessageList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction MessageList({ currentChannel, setSelectedMessageId }) {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [hoveredMessageId, setHoveredMessageId] = useState(null);\n  const [showReactionMenuForMessageId, setShowReactionMenuForMessageId] = useState(null);\n    \n  const apiKey = localStorage.getItem('api_key'); // Assuming the API key is stored in localStorage\n\n  useEffect(() => {\n    if (!currentChannel) return; // Don't fetch if no channel is selected\n\n    fetch(`/api/channels/${currentChannel}/messages`, {\n      method: 'GET',\n      headers: {\n        'API-Key': apiKey // Assuming the API key is sent as a Bearer token\n      },\n    })\n    .then(response => response.json())\n    .then(data => {\n      setMessages(data);\n    })\n    .catch(error => console.error('Error fetching messages:', error));\n  }, [currentChannel]); // Refetch messages when currentChannel changes\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!newMessage.trim()) return; // Prevent sending empty messages\n\n    try {\n      const response = await fetch(`/api/channels/${currentChannel}/messages`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'API-Key': apiKey // Assuming the API key is sent as a Bearer token\n        },\n        body: JSON.stringify({ message: newMessage }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to post message');\n      }\n\n      setNewMessage(''); // Clear the input field on successful message post\n\n      // Consider refetching messages for the current channel to show the new message\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n\n  const handleReplyClick = (messageId) => {\n    // Set the selected message ID to open the replies panel\n    setSelectedMessageId(messageId);\n  };\n\n  const handleAddReaction = (messageId, emoji) => {\n    console.log(`Adding '${emoji}' reaction to message ${messageId}`);\n    // Send the emoji reaction to your backend\n    setShowReactionMenuForMessageId(null); // Optionally close the menu\n  };\n\n  return (\n    <div className=\"message-list\">\n      {messages.map((msg) => (\n        <div \n          key={msg.id} \n          className=\"message-item\"\n          onMouseEnter={() => setHoveredMessageId(msg.id)}\n          onMouseLeave={() => setHoveredMessageId(null)}\n        >\n          <strong>{msg.name}:</strong> {msg.body}\n          {msg.num_replies > 0 && (\n            <div onClick={() => handleReplyClick(msg.id)}>\n              {msg.num_replies} of replies\n            </div>\n          )}\n          {hoveredMessageId === msg.id && (\n            <div className=\"message-actions\">\n              <button onClick={() => handleReplyClick(msg.id)}>Reply to Thread</button>\n              {/* Adjusted \"Add Reaction\" button */}\n              <button onClick={() => setShowReactionMenuForMessageId(showReactionMenuForMessageId === msg.id ? null : msg.id)}>Add Reaction</button>\n              {showReactionMenuForMessageId === msg.id && (\n                <div className=\"reaction-menu\">\n                  <button onClick={() => handleAddReaction(msg.id, '‚ù§Ô∏è')}>‚ù§Ô∏è</button>\n                  <button onClick={() => handleAddReaction(msg.id, 'üòä')}>üòä</button>\n                  <button onClick={() => handleAddReaction(msg.id, 'üò¢')}>üò¢</button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ))}\n      <form onSubmit={handleSubmit} className=\"message-form\">\n        <input\n          type=\"text\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          placeholder=\"Write a message...\"\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\n\nexport default MessageList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useNavigate,useParams}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ChannelList(_ref){let{}=_ref;const[channels,setChannels]=useState([]);const[unreadMessages,setUnreadMessages]=useState({});const[selectedChannelId,setSelectedChannelId]=useState(null);const{channelId}=useParams();let navigate=useNavigate();const goToProfile=()=>{navigate('/profile');};useEffect(()=>{const apiKey=localStorage.getItem('api_key');// Fetch channels from the API\nfetch('/api/channels',{method:'GET',headers:{'API-Key':apiKey}})// Adjust the URL as needed\n.then(response=>response.json()).then(data=>{setChannels(data);}).catch(error=>console.error('Error fetching channels:',error));fetch('/api/channels/access',{method:'GET',headers:{'API-Key':apiKey}}).then(response=>response.json()).then(data=>{const unreadCounts={};data.forEach(channel=>{unreadCounts[channel.channel_id]=channel.unread_messages;});setUnreadMessages(unreadCounts);}).catch(error=>console.error('Error fetching unread messages:',error));if(channelId){setSelectedChannelId(channelId);}},[channelId]);// This effect runs once on component mount\nconst selectChannel=async channelId=>{// Assuming `apiKey` is available, for example, through context or state\nconst apiKey=localStorage.getItem('api_key');try{// POST request to update last_message_seen\nconst response=await fetch(\"/api/channels/\".concat(channelId,\"/access\"),{method:'POST',headers:{'API-Key':apiKey}});if(!response.ok){throw new Error('Network response was not ok');}const data=await response.json();console.log(data);// Log the success message\nnavigate(\"/channels/\".concat(channelId));// Update the URL when a channel is clicked\n// Proceed to update the UI to show the selected channel\n// This might involve setting state or navigating to a different component/route\n}catch(error){console.error('Error updating last message seen:',error);}setSelectedChannelId(channelId);};const fetchChannels=()=>{const apiKey=localStorage.getItem('api_key');fetch('/api/channels',{method:'GET',headers:{'API-Key':apiKey}}).then(response=>response.json()).then(data=>setChannels(data)).catch(error=>console.error('Error fetching channels:',error));};const handleCreateChannel=async()=>{const channelName=prompt('Enter new channel name:');if(!channelName)return;// Exit if the user cancels or enters an empty name\nconst apiKey=localStorage.getItem('api_key');// Retrieve API key from localStorage\ntry{const response=await fetch('/api/channels/new',{// Adjust URL as needed\nmethod:'POST',headers:{'Content-Type':'application/json','API-Key':apiKey},body:JSON.stringify({name:channelName})});if(!response.ok){throw new Error('Failed to create channel');}fetchChannels();// Optionally, fetch channels again to update the list or update state directly\n}catch(error){console.error('Error creating channel:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"channel-list\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"channel-header\",children:\"Channels\"}),channels.map(channel=>/*#__PURE__*/_jsxs(\"div\",{className:\"channel-item \".concat(channel.id===selectedChannelId?'active':''),onClick:()=>selectChannel(channel.id),children:[channel.name,unreadMessages[channel.id]?\" (\".concat(unreadMessages[channel.id],\" unread)\"):'']},channel.id)),/*#__PURE__*/_jsx(\"button\",{onClick:handleCreateChannel,children:\"Create New Channel\"}),/*#__PURE__*/_jsx(\"button\",{onClick:goToProfile,children:\"Go to Profile\"})]});}export default ChannelList;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","jsx","_jsx","jsxs","_jsxs","ChannelList","_ref","channels","setChannels","unreadMessages","setUnreadMessages","selectedChannelId","setSelectedChannelId","channelId","navigate","goToProfile","apiKey","localStorage","getItem","fetch","method","headers","then","response","json","data","catch","error","console","unreadCounts","forEach","channel","channel_id","unread_messages","selectChannel","concat","ok","Error","log","fetchChannels","handleCreateChannel","channelName","prompt","body","JSON","stringify","name","className","children","map","id","onClick"],"sources":["/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/ChannelList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nfunction ChannelList({}) {\n  const [channels, setChannels] = useState([]);\n  const [unreadMessages, setUnreadMessages] = useState({});\n  const [selectedChannelId, setSelectedChannelId] = useState(null);\n  const { channelId } = useParams();\n  let navigate = useNavigate();\n  \n  const goToProfile = () => {navigate('/profile');};\n\n  useEffect(() => {\n    const apiKey = localStorage.getItem('api_key');\n\n    // Fetch channels from the API\n    fetch('/api/channels', {\n        method: 'GET', \n        headers: {\n            'API-Key': apiKey\n        }\n    }) // Adjust the URL as needed\n      .then(response => response.json())\n      .then(data => {\n        setChannels(data);\n      })\n      .catch(error => console.error('Error fetching channels:', error));\n\n      fetch('/api/channels/access', {\n        method: 'GET',\n        headers: {\n            'API-Key': apiKey\n        },\n      })\n      .then(response => response.json())\n      .then(data => {\n        const unreadCounts = {};\n        data.forEach(channel => {\n          unreadCounts[channel.channel_id] = channel.unread_messages;\n        });\n        setUnreadMessages(unreadCounts);\n      })\n      .catch(error => console.error('Error fetching unread messages:', error));\n      if (channelId) {\n        setSelectedChannelId(channelId);\n      }\n\n  }, [channelId]); // This effect runs once on component mount\n\n\n  const selectChannel = async (channelId) => {\n    // Assuming `apiKey` is available, for example, through context or state\n    const apiKey = localStorage.getItem('api_key');\n  \n    try {\n      // POST request to update last_message_seen\n      const response = await fetch(`/api/channels/${channelId}/access`, {\n        method: 'POST',\n        headers: {\n            'API-Key': apiKey\n        }\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      const data = await response.json();\n      console.log(data); // Log the success message\n      navigate(`/channels/${channelId}`); // Update the URL when a channel is clicked\n      // Proceed to update the UI to show the selected channel\n      // This might involve setting state or navigating to a different component/route\n    } catch (error) {\n      console.error('Error updating last message seen:', error);\n    }\n    setSelectedChannelId(channelId);\n  };\n\n\n  const fetchChannels = () => {\n    const apiKey = localStorage.getItem('api_key');\n    fetch('/api/channels', {\n        method: 'GET', \n      headers: {\n        'API-Key': apiKey\n      },\n    })\n    .then(response => response.json())\n    .then(data => setChannels(data))\n    .catch(error => console.error('Error fetching channels:', error));\n  };\n\n  const handleCreateChannel = async () => {\n    const channelName = prompt('Enter new channel name:');\n    if (!channelName) return; // Exit if the user cancels or enters an empty name\n\n    const apiKey = localStorage.getItem('api_key'); // Retrieve API key from localStorage\n\n    try {\n      const response = await fetch('/api/channels/new', { // Adjust URL as needed\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'API-Key': apiKey\n        },\n        body: JSON.stringify({ name: channelName }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create channel');\n      }\n      fetchChannels();\n      // Optionally, fetch channels again to update the list or update state directly\n    } catch (error) {\n      console.error('Error creating channel:', error);\n    }\n  };\n\n\n  return (\n    <div className=\"channel-list\">\n      <h2 className=\"channel-header\">Channels</h2>\n      {channels.map(channel => (\n        <div className={`channel-item ${channel.id === selectedChannelId ? 'active' : ''}`} key={channel.id} onClick={() => selectChannel(channel.id)}>\n          {channel.name}\n          {unreadMessages[channel.id] ? ` (${unreadMessages[channel.id]} unread)` : ''}\n        </div>\n      ))}\n      <button onClick={handleCreateChannel}>Create New Channel</button>\n      <button onClick={goToProfile}>Go to Profile</button>\n    </div>\n  );\n}\n\nexport default ChannelList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
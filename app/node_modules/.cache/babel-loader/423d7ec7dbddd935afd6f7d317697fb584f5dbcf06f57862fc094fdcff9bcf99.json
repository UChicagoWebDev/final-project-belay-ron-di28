{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function MessageList(_ref){let{currentChannel,setSelectedMessageId}=_ref;const[messages,setMessages]=useState([]);const[newMessage,setNewMessage]=useState('');const apiKey=localStorage.getItem('api_key');// Assuming the API key is stored in localStorage\nuseEffect(()=>{if(!currentChannel)return;// Don't fetch if no channel is selected\nfetch(\"/api/channels/\".concat(currentChannel,\"/messages\"),{method:'GET',headers:{'API-Key':apiKey// Assuming the API key is sent as a Bearer token\n}}).then(response=>response.json()).then(data=>{setMessages(data);}).catch(error=>console.error('Error fetching messages:',error));},[currentChannel]);// Refetch messages when currentChannel changes\nconst handleSubmit=async e=>{e.preventDefault();if(!newMessage.trim())return;// Prevent sending empty messages\ntry{const response=await fetch(\"/api/channels/\".concat(currentChannel,\"/messages\"),{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(apiKey)// Ensure this matches how your API expects the token\n},body:JSON.stringify({message:newMessage})});if(!response.ok){throw new Error('Failed to post message');}setNewMessage('');// Clear the input field on successful message post\n// Consider refetching messages for the current channel to show the new message\n}catch(error){console.error('Error posting message:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"message-list\",children:[messages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"message-item\",children:[/*#__PURE__*/_jsxs(\"strong\",{children:[msg.name,\":\"]}),\" \",msg.body,/*#__PURE__*/_jsx(\"button\",{onClick:()=>setSelectedMessageId(msg.id),children:\"See Replies\"})]},index)),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"message-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newMessage,onChange:e=>setNewMessage(e.target.value),placeholder:\"Write a message...\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Send\"})]})]});}export default MessageList;","map":{"version":3,"names":["React","useState","useEffect","jsxs","_jsxs","jsx","_jsx","MessageList","_ref","currentChannel","setSelectedMessageId","messages","setMessages","newMessage","setNewMessage","apiKey","localStorage","getItem","fetch","concat","method","headers","then","response","json","data","catch","error","console","handleSubmit","e","preventDefault","trim","body","JSON","stringify","message","ok","Error","className","children","map","msg","index","name","onClick","id","onSubmit","type","value","onChange","target","placeholder"],"sources":["/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/MessageList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction MessageList({ currentChannel, setSelectedMessageId }) {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n    \n  const apiKey = localStorage.getItem('api_key'); // Assuming the API key is stored in localStorage\n\n  useEffect(() => {\n    if (!currentChannel) return; // Don't fetch if no channel is selected\n\n    fetch(`/api/channels/${currentChannel}/messages`, {\n      method: 'GET',\n      headers: {\n        'API-Key': apiKey // Assuming the API key is sent as a Bearer token\n      },\n    })\n    .then(response => response.json())\n    .then(data => {\n      setMessages(data);\n    })\n    .catch(error => console.error('Error fetching messages:', error));\n  }, [currentChannel]); // Refetch messages when currentChannel changes\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!newMessage.trim()) return; // Prevent sending empty messages\n\n    try {\n      const response = await fetch(`/api/channels/${currentChannel}/messages`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`, // Ensure this matches how your API expects the token\n        },\n        body: JSON.stringify({ message: newMessage }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to post message');\n      }\n\n      setNewMessage(''); // Clear the input field on successful message post\n\n      // Consider refetching messages for the current channel to show the new message\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n\n  return (\n    <div className=\"message-list\">\n      {messages.map((msg, index) => (\n        <div key={index} className=\"message-item\">\n          <strong>{msg.name}:</strong> {msg.body}\n          <button onClick={() => setSelectedMessageId(msg.id)}>See Replies</button>\n        </div>\n      ))}\n      <form onSubmit={handleSubmit} className=\"message-form\">\n        <input\n          type=\"text\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          placeholder=\"Write a message...\"\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default MessageList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
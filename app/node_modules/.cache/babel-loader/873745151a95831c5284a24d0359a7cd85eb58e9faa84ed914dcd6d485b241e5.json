{"ast":null,"code":"var _jsxFileName = \"/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/ChannelList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChannelList({\n  setCurrentChannel\n}) {\n  _s();\n  const [channels, setChannels] = useState([]);\n  const [unreadMessages, setUnreadMessages] = useState({});\n  let navigate = useNavigate();\n  const goToProfile = () => {\n    navigate('/profile');\n  };\n  useEffect(() => {\n    const apiKey = localStorage.getItem('api_key');\n\n    // Fetch channels from the API\n    fetch('/api/channels', {\n      method: 'GET',\n      headers: {\n        'API-Key': apiKey\n      }\n    }) // Adjust the URL as needed\n    .then(response => response.json()).then(data => {\n      setChannels(data);\n    }).catch(error => console.error('Error fetching channels:', error));\n    fetch('/api/channels/access', {\n      method: 'GET',\n      headers: {\n        'API-Key': apiKey\n      }\n    }).then(response => response.json()).then(data => {\n      const unreadCounts = {};\n      data.forEach(channel => {\n        unreadCounts[channel.channel_id] = channel.unread_messages;\n      });\n      setUnreadMessages(unreadCounts);\n    }).catch(error => console.error('Error fetching unread messages:', error));\n  }, []); // This effect runs once on component mount\n\n  const selectChannel = async channelId => {\n    // Assuming `apiKey` is available, for example, through context or state\n    const apiKey = localStorage.getItem('api_key');\n    try {\n      // POST request to update last_message_seen\n      const response = await fetch(`/api/channels/${channelId}/access`, {\n        method: 'POST',\n        headers: {\n          'API-Key': apiKey\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log(data); // Log the success message\n      navigate(`/channels/${channelId}`); // Update the URL when a channel is clicked\n      // Proceed to update the UI to show the selected channel\n      // This might involve setting state or navigating to a different component/route\n    } catch (error) {\n      console.error('Error updating last message seen:', error);\n    }\n  };\n  const fetchChannels = () => {\n    const apiKey = localStorage.getItem('api_key');\n    fetch('/api/channels', {\n      method: 'GET',\n      headers: {\n        'API-Key': apiKey\n      }\n    }).then(response => response.json()).then(data => setChannels(data)).catch(error => console.error('Error fetching channels:', error));\n  };\n  const handleCreateChannel = async () => {\n    const channelName = prompt('Enter new channel name:');\n    if (!channelName) return; // Exit if the user cancels or enters an empty name\n\n    const apiKey = localStorage.getItem('api_key'); // Retrieve API key from localStorage\n\n    try {\n      const response = await fetch('/api/channels/new', {\n        // Adjust URL as needed\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'API-Key': apiKey\n        },\n        body: JSON.stringify({\n          name: channelName\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create channel');\n      }\n      fetchChannels();\n      // Optionally, fetch channels again to update the list or update state directly\n    } catch (error) {\n      console.error('Error creating channel:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"channel-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"channel-header\",\n      children: \"Channels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), channels.map(channel => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => selectChannel(channel.id),\n      children: [channel.name, unreadMessages[channel.id] ? ` (${unreadMessages[channel.id]} unread)` : '']\n    }, channel.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateChannel,\n      children: \"Create New Channel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goToProfile,\n      children: \"Go to Profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(ChannelList, \"4/LLooCx4fR4b4eQ7pAba4H22QE=\", false, function () {\n  return [useNavigate];\n});\n_c = ChannelList;\nexport default ChannelList;\nvar _c;\n$RefreshReg$(_c, \"ChannelList\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","ChannelList","setCurrentChannel","_s","channels","setChannels","unreadMessages","setUnreadMessages","navigate","goToProfile","apiKey","localStorage","getItem","fetch","method","headers","then","response","json","data","catch","error","console","unreadCounts","forEach","channel","channel_id","unread_messages","selectChannel","channelId","ok","Error","log","fetchChannels","handleCreateChannel","channelName","prompt","body","JSON","stringify","name","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","id","_c","$RefreshReg$"],"sources":["/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/ChannelList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nfunction ChannelList({ setCurrentChannel }) {\n  const [channels, setChannels] = useState([]);\n  const [unreadMessages, setUnreadMessages] = useState({});\n  let navigate = useNavigate();\n  \n  const goToProfile = () => {navigate('/profile');};\n\n  useEffect(() => {\n    const apiKey = localStorage.getItem('api_key');\n\n    // Fetch channels from the API\n    fetch('/api/channels', {\n        method: 'GET', \n        headers: {\n            'API-Key': apiKey\n        }\n    }) // Adjust the URL as needed\n      .then(response => response.json())\n      .then(data => {\n        setChannels(data);\n      })\n      .catch(error => console.error('Error fetching channels:', error));\n\n      fetch('/api/channels/access', {\n        method: 'GET',\n        headers: {\n            'API-Key': apiKey\n        },\n      })\n      .then(response => response.json())\n      .then(data => {\n        const unreadCounts = {};\n        data.forEach(channel => {\n          unreadCounts[channel.channel_id] = channel.unread_messages;\n        });\n        setUnreadMessages(unreadCounts);\n      })\n      .catch(error => console.error('Error fetching unread messages:', error));\n\n  }, []); // This effect runs once on component mount\n\n\n  const selectChannel = async (channelId) => {\n    // Assuming `apiKey` is available, for example, through context or state\n    const apiKey = localStorage.getItem('api_key');\n  \n    try {\n      // POST request to update last_message_seen\n      const response = await fetch(`/api/channels/${channelId}/access`, {\n        method: 'POST',\n        headers: {\n            'API-Key': apiKey\n        }\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      const data = await response.json();\n      console.log(data); // Log the success message\n      navigate(`/channels/${channelId}`); // Update the URL when a channel is clicked\n      // Proceed to update the UI to show the selected channel\n      // This might involve setting state or navigating to a different component/route\n    } catch (error) {\n      console.error('Error updating last message seen:', error);\n    }\n  };\n\n\n  const fetchChannels = () => {\n    const apiKey = localStorage.getItem('api_key');\n    fetch('/api/channels', {\n        method: 'GET', \n      headers: {\n        'API-Key': apiKey\n      },\n    })\n    .then(response => response.json())\n    .then(data => setChannels(data))\n    .catch(error => console.error('Error fetching channels:', error));\n  };\n\n  const handleCreateChannel = async () => {\n    const channelName = prompt('Enter new channel name:');\n    if (!channelName) return; // Exit if the user cancels or enters an empty name\n\n    const apiKey = localStorage.getItem('api_key'); // Retrieve API key from localStorage\n\n    try {\n      const response = await fetch('/api/channels/new', { // Adjust URL as needed\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'API-Key': apiKey\n        },\n        body: JSON.stringify({ name: channelName }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create channel');\n      }\n      fetchChannels();\n      // Optionally, fetch channels again to update the list or update state directly\n    } catch (error) {\n      console.error('Error creating channel:', error);\n    }\n  };\n\n\n  return (\n    <div className=\"channel-list\">\n      <h2 className=\"channel-header\">Channels</h2>\n      {channels.map(channel => (\n        <div key={channel.id} onClick={() => selectChannel(channel.id)}>\n          {channel.name}\n          {unreadMessages[channel.id] ? ` (${unreadMessages[channel.id]} unread)` : ''}\n        </div>\n      ))}\n      <button onClick={handleCreateChannel}>Create New Channel</button>\n      <button onClick={goToProfile}>Go to Profile</button>\n    </div>\n  );\n}\n\nexport default ChannelList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function MessageList(_ref){let{currentChannel}=_ref;const[messages,setMessages]=useState([]);const apiKey=localStorage.getItem('api_key');// Retrieve API key from localStorage\nuseEffect(()=>{if(!currentChannel)return;// Don't fetch if no channel is selected\nfetch(\"/api/channels/\".concat(currentChannel,\"/messages\"),{method:'GET',headers:{'API-Key':apiKey// Assuming the API key is sent as a Bearer token\n}}).then(response=>response.json()).then(data=>{setMessages(data);}).catch(error=>console.error('Error fetching messages:',error));},[currentChannel]);// Dependency array: Refetch messages when currentChannel changes\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"message-list\",children:messages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[msg.name,\":\"]}),\" \",msg.body]},index))});}export default MessageList;","map":{"version":3,"names":["React","useState","useEffect","jsxs","_jsxs","jsx","_jsx","MessageList","_ref","currentChannel","messages","setMessages","apiKey","localStorage","getItem","fetch","concat","method","headers","then","response","json","data","catch","error","console","className","children","map","msg","index","name","body"],"sources":["/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/MessageList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction MessageList({ currentChannel }) {\n  const [messages, setMessages] = useState([]);\n  const apiKey = localStorage.getItem('api_key'); // Retrieve API key from localStorage\n\n  useEffect(() => {\n    if (!currentChannel) return; // Don't fetch if no channel is selected\n\n    fetch(`/api/channels/${currentChannel}/messages`, {\n      method: 'GET',\n      headers: {\n        'API-Key': apiKey // Assuming the API key is sent as a Bearer token\n      },\n    })\n    .then(response => response.json())\n    .then(data => {\n      setMessages(data);\n    })\n    .catch(error => console.error('Error fetching messages:', error));\n  }, [currentChannel]); // Dependency array: Refetch messages when currentChannel changes\n\n  return (\n    <div className=\"message-list\">\n      {messages.map((msg, index) => (\n        <div key={index}>\n          <strong>{msg.name}:</strong> {msg.body}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default MessageList;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,IAAA,IAAAC,KAAA,gCAAAC,GAAA,IAAAC,IAAA,yBAEnD,QAAS,CAAAC,WAAWA,CAAAC,IAAA,CAAqB,IAApB,CAAEC,cAAe,CAAC,CAAAD,IAAA,CACrC,KAAM,CAACE,QAAQ,CAAEC,WAAW,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAAAW,MAAM,CAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAE;AAEhDZ,SAAS,CAAC,IAAM,CACd,GAAI,CAACO,cAAc,CAAE,OAAQ;AAE7BM,KAAK,kBAAAC,MAAA,CAAkBP,cAAc,cAAa,CAChDQ,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,SAAS,CAAEN,MAAO;AACpB,CACF,CAAC,CAAC,CACDO,IAAI,CAACC,QAAQ,EAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,EAAI,CACZX,WAAW,CAACW,IAAI,CAAC,CACnB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,EAAIC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAAC,CACnE,CAAC,CAAE,CAACf,cAAc,CAAC,CAAC,CAAE;AAEtB,mBACEH,IAAA,QAAKoB,SAAS,CAAC,cAAc,CAAAC,QAAA,CAC1BjB,QAAQ,CAACkB,GAAG,CAAC,CAACC,GAAG,CAAEC,KAAK,gBACvB1B,KAAA,QAAAuB,QAAA,eACEvB,KAAA,WAAAuB,QAAA,EAASE,GAAG,CAACE,IAAI,CAAC,GAAC,EAAQ,CAAC,IAAC,CAACF,GAAG,CAACG,IAAI,GAD9BF,KAEL,CACN,CAAC,CACC,CAAC,CAEV,CAEA,cAAe,CAAAvB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}
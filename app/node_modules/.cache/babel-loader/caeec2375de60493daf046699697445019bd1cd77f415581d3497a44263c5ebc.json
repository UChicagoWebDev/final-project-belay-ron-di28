{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ChannelList(_ref){let{}=_ref;let navigate=useNavigate();const[channels,setChannels]=useState([]);const[unreadMessages,setUnreadMessages]=useState({});const[selectedChannelId,setSelectedChannelId]=useState(null);const apiKey=localStorage.getItem('api_key');const goToProfile=()=>{navigate('/profile');};useEffect(()=>{fetch('/api/channels',{method:'GET',headers:{'API-Key':apiKey}}).then(response=>response.json()).then(data=>{setChannels(data);}).catch(error=>console.error('Error fetching channels:',error));fetch('/api/channels/access',{method:'GET',headers:{'API-Key':apiKey}}).then(response=>response.json()).then(data=>{const unreadCounts={};data.forEach(channel=>{unreadCounts[channel.channel_id]=channel.unread_messages;});setUnreadMessages(unreadCounts);}).catch(error=>console.error('Error fetching unread messages:',error));},[]);// This effect runs once on component mount\nconst selectChannel=async channelId=>{setSelectedChannelId(channelId);navigate(\"/channels/\".concat(channelId));try{const response=await fetch(\"/api/channels/\".concat(channelId,\"/access\"),{method:'POST',headers:{'API-Key':apiKey}});if(!response.ok){throw new Error('Network response was not ok');}const data=await response.json();console.log(data);}catch(error){console.error('Error updating last message seen:',error);}};const fetchChannels=()=>{fetch('/api/channels',{method:'GET',headers:{'API-Key':apiKey}}).then(response=>response.json()).then(data=>setChannels(data)).catch(error=>console.error('Error fetching channels:',error));};const handleCreateChannel=async()=>{const channelName=prompt('Enter new channel name:');if(!channelName)return;try{const response=await fetch('/api/channels/new',{method:'POST',headers:{'Content-Type':'application/json','API-Key':apiKey},body:JSON.stringify({name:channelName})});if(!response.ok){throw new Error('Failed to create channel');}fetchChannels();}catch(error){console.error('Error creating channel:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"channel-list\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"channel-header\",children:\"Channels\"}),channels.map(channel=>/*#__PURE__*/_jsxs(\"div\",{className:\"channel-item \".concat(channel.id===selectedChannelId?'active':''),onClick:()=>selectChannel(channel.id),children:[channel.name,unreadMessages[channel.id]?\" (\".concat(unreadMessages[channel.id],\" unread)\"):'']},channel.id)),/*#__PURE__*/_jsx(\"button\",{onClick:handleCreateChannel,children:\"Create New Channel\"}),/*#__PURE__*/_jsx(\"button\",{onClick:goToProfile,children:\"Go to Profile\"})]});}export default ChannelList;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsx","_jsx","jsxs","_jsxs","ChannelList","_ref","navigate","channels","setChannels","unreadMessages","setUnreadMessages","selectedChannelId","setSelectedChannelId","apiKey","localStorage","getItem","goToProfile","fetch","method","headers","then","response","json","data","catch","error","console","unreadCounts","forEach","channel","channel_id","unread_messages","selectChannel","channelId","concat","ok","Error","log","fetchChannels","handleCreateChannel","channelName","prompt","body","JSON","stringify","name","className","children","map","id","onClick"],"sources":["/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/ChannelList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nfunction ChannelList({}) {\n    let navigate = useNavigate();\n  \n    const [channels, setChannels] = useState([]);\n    const [unreadMessages, setUnreadMessages] = useState({});\n    const [selectedChannelId, setSelectedChannelId] = useState(null);\n  \n    const apiKey = localStorage.getItem('api_key');\n    \n    const goToProfile = () => {navigate('/profile');};\n\n    useEffect(() => {\n        fetch('/api/channels', {\n            method: 'GET', \n            headers: {\n                'API-Key': apiKey\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            setChannels(data);\n        })\n        .catch(error => console.error('Error fetching channels:', error));\n\n        fetch('/api/channels/access', {\n            method: 'GET',\n            headers: {\n                'API-Key': apiKey\n            },\n        })\n        .then(response => response.json())\n        .then(data => {\n            const unreadCounts = {};\n            data.forEach(channel => {\n            unreadCounts[channel.channel_id] = channel.unread_messages;\n            });\n            setUnreadMessages(unreadCounts);\n        })\n        .catch(error => console.error('Error fetching unread messages:', error));\n    }, []); // This effect runs once on component mount\n\n\n    const selectChannel = async (channelId) => {\n        setSelectedChannelId(channelId);\n        navigate(`/channels/${channelId}`);\n    \n        try {\n        const response = await fetch(`/api/channels/${channelId}/access`, {\n            method: 'POST',\n            headers: {\n                'API-Key': apiKey\n            }\n        });\n    \n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n    \n        const data = await response.json();\n        console.log(data); \n        } catch (error) {\n            console.error('Error updating last message seen:', error);\n        }\n    };\n\n    const fetchChannels = () => {\n        fetch('/api/channels', {\n            method: 'GET', \n            headers: {\n                'API-Key': apiKey\n            },\n        })\n        .then(response => response.json())\n        .then(data => setChannels(data))\n        .catch(error => console.error('Error fetching channels:', error));\n    };\n\n    const handleCreateChannel = async () => {\n        const channelName = prompt('Enter new channel name:');\n        if (!channelName) return; \n\n        try {\n        const response = await fetch('/api/channels/new', { \n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            'API-Key': apiKey\n            },\n            body: JSON.stringify({ name: channelName }),\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to create channel');\n        }\n        fetchChannels();\n        } catch (error) {\n        console.error('Error creating channel:', error);\n        }\n    };\n\n    return (\n        <div className=\"channel-list\">\n        <h2 className=\"channel-header\">Channels</h2>\n        {channels.map(channel => (\n            <div className={`channel-item ${channel.id === selectedChannelId ? 'active' : ''}`} key={channel.id} onClick={() => selectChannel(channel.id)}>\n            {channel.name}\n            {unreadMessages[channel.id] ? ` (${unreadMessages[channel.id]} unread)` : ''}\n            </div>\n        ))}\n        <button onClick={handleCreateChannel}>Create New Channel</button>\n        <button onClick={goToProfile}>Go to Profile</button>\n        </div>\n    );\n}\n\nexport default ChannelList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
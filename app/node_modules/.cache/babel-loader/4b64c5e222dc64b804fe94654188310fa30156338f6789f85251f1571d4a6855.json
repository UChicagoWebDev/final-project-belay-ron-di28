{"ast":null,"code":"var _jsxFileName = \"/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/MessageList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MessageList({\n  currentChannel,\n  setSelectedMessageId\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [hoveredMessageId, setHoveredMessageId] = useState(null);\n  const apiKey = localStorage.getItem('api_key'); // Assuming the API key is stored in localStorage\n\n  useEffect(() => {\n    if (!currentChannel) return; // Don't fetch if no channel is selected\n\n    fetch(`/api/channels/${currentChannel}/messages`, {\n      method: 'GET',\n      headers: {\n        'API-Key': apiKey // Assuming the API key is sent as a Bearer token\n      }\n    }).then(response => response.json()).then(data => {\n      setMessages(data);\n    }).catch(error => console.error('Error fetching messages:', error));\n  }, [currentChannel]); // Refetch messages when currentChannel changes\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!newMessage.trim()) return; // Prevent sending empty messages\n\n    try {\n      const response = await fetch(`/api/channels/${currentChannel}/messages`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'API-Key': apiKey // Assuming the API key is sent as a Bearer token\n        },\n        body: JSON.stringify({\n          message: newMessage\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to post message');\n      }\n      setNewMessage(''); // Clear the input field on successful message post\n\n      // Consider refetching messages for the current channel to show the new message\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n  const handleReplyClick = messageId => {\n    // Set the selected message ID to open the replies panel\n    setSelectedMessageId(messageId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-list\",\n    children: messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-item\",\n      onMouseEnter: () => setHoveredMessageId(msg.id),\n      onMouseLeave: () => setHoveredMessageId(null),\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [msg.name, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), \" \", msg.body, msg.num_replies > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleReplyClick(msg.id),\n        children: [msg.num_replies, \" of replies\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), hoveredMessageId === msg.id && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleReplyClick(msg.id),\n          children: \"Reply to Thread\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Add Reaction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)]\n    }, msg.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(MessageList, \"lpF2DExWdgnNH6/OqMfAPi/Ghm0=\");\n_c = MessageList;\nexport default MessageList;\nvar _c;\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MessageList","currentChannel","setSelectedMessageId","_s","messages","setMessages","newMessage","setNewMessage","hoveredMessageId","setHoveredMessageId","apiKey","localStorage","getItem","fetch","method","headers","then","response","json","data","catch","error","console","handleSubmit","e","preventDefault","trim","body","JSON","stringify","message","ok","Error","handleReplyClick","messageId","className","children","map","msg","onMouseEnter","id","onMouseLeave","name","fileName","_jsxFileName","lineNumber","columnNumber","num_replies","onClick","_c","$RefreshReg$"],"sources":["/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/MessageList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction MessageList({ currentChannel, setSelectedMessageId }) {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [hoveredMessageId, setHoveredMessageId] = useState(null);\n    \n  const apiKey = localStorage.getItem('api_key'); // Assuming the API key is stored in localStorage\n\n  useEffect(() => {\n    if (!currentChannel) return; // Don't fetch if no channel is selected\n\n    fetch(`/api/channels/${currentChannel}/messages`, {\n      method: 'GET',\n      headers: {\n        'API-Key': apiKey // Assuming the API key is sent as a Bearer token\n      },\n    })\n    .then(response => response.json())\n    .then(data => {\n      setMessages(data);\n    })\n    .catch(error => console.error('Error fetching messages:', error));\n  }, [currentChannel]); // Refetch messages when currentChannel changes\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!newMessage.trim()) return; // Prevent sending empty messages\n\n    try {\n      const response = await fetch(`/api/channels/${currentChannel}/messages`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'API-Key': apiKey // Assuming the API key is sent as a Bearer token\n        },\n        body: JSON.stringify({ message: newMessage }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to post message');\n      }\n\n      setNewMessage(''); // Clear the input field on successful message post\n\n      // Consider refetching messages for the current channel to show the new message\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n\n  const handleReplyClick = (messageId) => {\n    // Set the selected message ID to open the replies panel\n    setSelectedMessageId(messageId);\n  };\n\n\n  return (\n    <div className=\"message-list\">\n      {messages.map((msg) => (\n        <div \n          key={msg.id} \n          className=\"message-item\"\n          onMouseEnter={() => setHoveredMessageId(msg.id)}\n          onMouseLeave={() => setHoveredMessageId(null)}\n        >\n          <strong>{msg.name}:</strong> {msg.body}\n          {msg.num_replies > 0 && (\n            <div onClick={() => handleReplyClick(msg.id)}>\n              {msg.num_replies} of replies\n            </div>\n          )}\n          {hoveredMessageId === msg.id && (\n            <div className=\"message-actions\">\n              <button onClick={() => handleReplyClick(msg.id)}>Reply to Thread</button>\n              {/* Placeholder for \"Add Reaction\" button */}\n              <button>Add Reaction</button>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\n\nexport default MessageList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function ReplyList(_ref){let{messageId}=_ref;const[parentMessage,setParentMessage]=useState(null);const[replies,setReplies]=useState([]);const[newReply,setNewReply]=useState('');// State to hold the new reply input\nuseEffect(()=>{if(!messageId)return;const apiKey=localStorage.getItem('api_key');// Fetch the parent message and its replies\nfetch(\"/api/messages/\".concat(messageId,\"/replies\"),{headers:{'Authorization':\"Bearer \".concat(apiKey)// Adjust according to your API requirements\n}}).then(response=>response.json()).then(data=>{setParentMessage(data.parentMessage);setReplies(data.replies);}).catch(error=>console.error('Error fetching replies:',error));},[messageId]);const handleSubmit=async e=>{e.preventDefault();if(!newReply.trim())return;// Prevent sending empty replies\ntry{const response=await fetch(\"/api/messages/\".concat(messageId,\"/replies\"),{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(apiKey)// Ensure this matches how your API expects the token\n},body:JSON.stringify({message:newReply})});if(!response.ok){throw new Error('Failed to post reply');}setNewReply('');// Clear the input field on successful reply post\n// Optionally, refetch replies for the current message to show the new reply\n}catch(error){console.error('Error posting reply:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"reply-list\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"parent-message\",children:[/*#__PURE__*/_jsxs(\"strong\",{children:[parentMessage===null||parentMessage===void 0?void 0:parentMessage.name,\":\"]}),\" \",parentMessage===null||parentMessage===void 0?void 0:parentMessage.body]}),/*#__PURE__*/_jsx(\"div\",{className:\"replies\",children:replies.length>0?replies.map((reply,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"reply\",children:[/*#__PURE__*/_jsxs(\"strong\",{children:[reply.name,\":\"]}),\" \",reply.body]},index)):/*#__PURE__*/_jsx(\"p\",{children:\"No replies yet\"})}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"reply-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newReply,onChange:e=>setNewReply(e.target.value),placeholder:\"Write a reply...\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Send\"})]})]});}export default ReplyList;","map":{"version":3,"names":["React","useState","useEffect","jsxs","_jsxs","jsx","_jsx","ReplyList","_ref","messageId","parentMessage","setParentMessage","replies","setReplies","newReply","setNewReply","apiKey","localStorage","getItem","fetch","concat","headers","then","response","json","data","catch","error","console","handleSubmit","e","preventDefault","trim","method","body","JSON","stringify","message","ok","Error","className","children","name","length","map","reply","index","onSubmit","type","value","onChange","target","placeholder"],"sources":["/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/ReplyList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction ReplyList({ messageId }) {\n  const [parentMessage, setParentMessage] = useState(null);\n  const [replies, setReplies] = useState([]);\n  const [newReply, setNewReply] = useState(''); // State to hold the new reply input\n\n  useEffect(() => {\n    if (!messageId) return;\n\n    const apiKey = localStorage.getItem('api_key');\n\n    // Fetch the parent message and its replies\n    fetch(`/api/messages/${messageId}/replies`, {\n      headers: {\n        'Authorization': `Bearer ${apiKey}`, // Adjust according to your API requirements\n      },\n    })\n    .then(response => response.json())\n    .then(data => {\n      setParentMessage(data.parentMessage);\n      setReplies(data.replies);\n    })\n    .catch(error => console.error('Error fetching replies:', error));\n  }, [messageId]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!newReply.trim()) return; // Prevent sending empty replies\n\n    try {\n      const response = await fetch(`/api/messages/${messageId}/replies`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`, // Ensure this matches how your API expects the token\n        },\n        body: JSON.stringify({ message: newReply }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to post reply');\n      }\n\n      setNewReply(''); // Clear the input field on successful reply post\n\n      // Optionally, refetch replies for the current message to show the new reply\n    } catch (error) {\n      console.error('Error posting reply:', error);\n    }\n  };\n\n  return (\n    <div className=\"reply-list\">\n      <div className=\"parent-message\">\n        <strong>{parentMessage?.name}:</strong> {parentMessage?.body}\n      </div>\n      <div className=\"replies\">\n        {replies.length > 0 ? (\n          replies.map((reply, index) => (\n            <div key={index} className=\"reply\">\n              <strong>{reply.name}:</strong> {reply.body}\n            </div>\n          ))\n        ) : (\n          <p>No replies yet</p>\n        )}\n      </div>\n      <form onSubmit={handleSubmit} className=\"reply-form\">\n        <input\n          type=\"text\"\n          value={newReply}\n          onChange={(e) => setNewReply(e.target.value)}\n          placeholder=\"Write a reply...\"\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default ReplyList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
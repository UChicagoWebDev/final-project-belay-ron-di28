{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function MessageList(_ref){let{currentChannel,setSelectedMessageId}=_ref;const[messages,setMessages]=useState([]);const[newMessage,setNewMessage]=useState('');const[hoveredMessageId,setHoveredMessageId]=useState(null);const apiKey=localStorage.getItem('api_key');// Assuming the API key is stored in localStorage\nuseEffect(()=>{if(!currentChannel)return;// Don't fetch if no channel is selected\nfetch(\"/api/channels/\".concat(currentChannel,\"/messages\"),{method:'GET',headers:{'API-Key':apiKey// Assuming the API key is sent as a Bearer token\n}}).then(response=>response.json()).then(data=>{setMessages(data);}).catch(error=>console.error('Error fetching messages:',error));},[currentChannel]);// Refetch messages when currentChannel changes\nconst handleSubmit=async e=>{e.preventDefault();if(!newMessage.trim())return;// Prevent sending empty messages\ntry{const response=await fetch(\"/api/channels/\".concat(currentChannel,\"/messages\"),{method:'POST',headers:{'Content-Type':'application/json','API-Key':apiKey// Assuming the API key is sent as a Bearer token\n},body:JSON.stringify({message:newMessage})});if(!response.ok){throw new Error('Failed to post message');}setNewMessage('');// Clear the input field on successful message post\n// Consider refetching messages for the current channel to show the new message\n}catch(error){console.error('Error posting message:',error);}};const handleReplyClick=messageId=>{// Set the selected message ID to open the replies panel\nsetSelectedMessageId(messageId);};return/*#__PURE__*/_jsx(\"div\",{className:\"message-list\",children:messages.map(msg=>/*#__PURE__*/_jsxs(\"div\",{className:\"message-item\",onMouseEnter:()=>setHoveredMessageId(msg.id),onMouseLeave:()=>setHoveredMessageId(null),children:[/*#__PURE__*/_jsxs(\"strong\",{children:[msg.name,\":\"]}),\" \",msg.body,msg.num_replies>0&&/*#__PURE__*/_jsxs(\"div\",{onClick:()=>handleReplyClick(msg.id),children:[msg.num_replies,\" of replies\"]}),hoveredMessageId===msg.id&&/*#__PURE__*/_jsxs(\"div\",{className:\"message-actions\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleReplyClick(msg.id),children:\"Reply to Thread\"}),/*#__PURE__*/_jsx(\"button\",{children:\"Add Reaction\"})]})]},msg.id))});}export default MessageList;","map":{"version":3,"names":["React","useState","useEffect","jsxs","_jsxs","jsx","_jsx","MessageList","_ref","currentChannel","setSelectedMessageId","messages","setMessages","newMessage","setNewMessage","hoveredMessageId","setHoveredMessageId","apiKey","localStorage","getItem","fetch","concat","method","headers","then","response","json","data","catch","error","console","handleSubmit","e","preventDefault","trim","body","JSON","stringify","message","ok","Error","handleReplyClick","messageId","className","children","map","msg","onMouseEnter","id","onMouseLeave","name","num_replies","onClick"],"sources":["/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/MessageList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction MessageList({ currentChannel, setSelectedMessageId }) {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [hoveredMessageId, setHoveredMessageId] = useState(null);\n    \n  const apiKey = localStorage.getItem('api_key'); // Assuming the API key is stored in localStorage\n\n  useEffect(() => {\n    if (!currentChannel) return; // Don't fetch if no channel is selected\n\n    fetch(`/api/channels/${currentChannel}/messages`, {\n      method: 'GET',\n      headers: {\n        'API-Key': apiKey // Assuming the API key is sent as a Bearer token\n      },\n    })\n    .then(response => response.json())\n    .then(data => {\n      setMessages(data);\n    })\n    .catch(error => console.error('Error fetching messages:', error));\n  }, [currentChannel]); // Refetch messages when currentChannel changes\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!newMessage.trim()) return; // Prevent sending empty messages\n\n    try {\n      const response = await fetch(`/api/channels/${currentChannel}/messages`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'API-Key': apiKey // Assuming the API key is sent as a Bearer token\n        },\n        body: JSON.stringify({ message: newMessage }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to post message');\n      }\n\n      setNewMessage(''); // Clear the input field on successful message post\n\n      // Consider refetching messages for the current channel to show the new message\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n\n  const handleReplyClick = (messageId) => {\n    // Set the selected message ID to open the replies panel\n    setSelectedMessageId(messageId);\n  };\n\n\n  return (\n    <div className=\"message-list\">\n      {messages.map((msg) => (\n        <div \n          key={msg.id} \n          className=\"message-item\"\n          onMouseEnter={() => setHoveredMessageId(msg.id)}\n          onMouseLeave={() => setHoveredMessageId(null)}\n        >\n          <strong>{msg.name}:</strong> {msg.body}\n          {msg.num_replies > 0 && (\n            <div onClick={() => handleReplyClick(msg.id)}>\n              {msg.num_replies} of replies\n            </div>\n          )}\n          {hoveredMessageId === msg.id && (\n            <div className=\"message-actions\">\n              <button onClick={() => handleReplyClick(msg.id)}>Reply to Thread</button>\n              {/* Placeholder for \"Add Reaction\" button */}\n              <button>Add Reaction</button>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\n\nexport default MessageList;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,IAAA,IAAAC,KAAA,gCAAAC,GAAA,IAAAC,IAAA,yBAEnD,QAAS,CAAAC,WAAWA,CAAAC,IAAA,CAA2C,IAA1C,CAAEC,cAAc,CAAEC,oBAAqB,CAAC,CAAAF,IAAA,CAC3D,KAAM,CAACG,QAAQ,CAAEC,WAAW,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACY,UAAU,CAAEC,aAAa,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACc,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAE9D,KAAM,CAAAgB,MAAM,CAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAE;AAEhDjB,SAAS,CAAC,IAAM,CACd,GAAI,CAACO,cAAc,CAAE,OAAQ;AAE7BW,KAAK,kBAAAC,MAAA,CAAkBZ,cAAc,cAAa,CAChDa,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,SAAS,CAAEN,MAAO;AACpB,CACF,CAAC,CAAC,CACDO,IAAI,CAACC,QAAQ,EAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,EAAI,CACZf,WAAW,CAACe,IAAI,CAAC,CACnB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,EAAIC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAAC,CACnE,CAAC,CAAE,CAACpB,cAAc,CAAC,CAAC,CAAE;AAGtB,KAAM,CAAAsB,YAAY,CAAG,KAAO,CAAAC,CAAC,EAAK,CAChCA,CAAC,CAACC,cAAc,CAAC,CAAC,CAElB,GAAI,CAACpB,UAAU,CAACqB,IAAI,CAAC,CAAC,CAAE,OAAQ;AAEhC,GAAI,CACF,KAAM,CAAAT,QAAQ,CAAG,KAAM,CAAAL,KAAK,kBAAAC,MAAA,CAAkBZ,cAAc,cAAa,CACvEa,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,SAAS,CAAEN,MAAO;AACpB,CAAC,CACDkB,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEC,OAAO,CAAEzB,UAAW,CAAC,CAC9C,CAAC,CAAC,CAEF,GAAI,CAACY,QAAQ,CAACc,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,wBAAwB,CAAC,CAC3C,CAEA1B,aAAa,CAAC,EAAE,CAAC,CAAE;AAEnB;AACF,CAAE,MAAOe,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAChD,CACF,CAAC,CAED,KAAM,CAAAY,gBAAgB,CAAIC,SAAS,EAAK,CACtC;AACAhC,oBAAoB,CAACgC,SAAS,CAAC,CACjC,CAAC,CAGD,mBACEpC,IAAA,QAAKqC,SAAS,CAAC,cAAc,CAAAC,QAAA,CAC1BjC,QAAQ,CAACkC,GAAG,CAAEC,GAAG,eAChB1C,KAAA,QAEEuC,SAAS,CAAC,cAAc,CACxBI,YAAY,CAAEA,CAAA,GAAM/B,mBAAmB,CAAC8B,GAAG,CAACE,EAAE,CAAE,CAChDC,YAAY,CAAEA,CAAA,GAAMjC,mBAAmB,CAAC,IAAI,CAAE,CAAA4B,QAAA,eAE9CxC,KAAA,WAAAwC,QAAA,EAASE,GAAG,CAACI,IAAI,CAAC,GAAC,EAAQ,CAAC,IAAC,CAACJ,GAAG,CAACX,IAAI,CACrCW,GAAG,CAACK,WAAW,CAAG,CAAC,eAClB/C,KAAA,QAAKgD,OAAO,CAAEA,CAAA,GAAMX,gBAAgB,CAACK,GAAG,CAACE,EAAE,CAAE,CAAAJ,QAAA,EAC1CE,GAAG,CAACK,WAAW,CAAC,aACnB,EAAK,CACN,CACApC,gBAAgB,GAAK+B,GAAG,CAACE,EAAE,eAC1B5C,KAAA,QAAKuC,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9BtC,IAAA,WAAQ8C,OAAO,CAAEA,CAAA,GAAMX,gBAAgB,CAACK,GAAG,CAACE,EAAE,CAAE,CAAAJ,QAAA,CAAC,iBAAe,CAAQ,CAAC,cAEzEtC,IAAA,WAAAsC,QAAA,CAAQ,cAAY,CAAQ,CAAC,EAC1B,CACN,GAjBIE,GAAG,CAACE,EAkBN,CACN,CAAC,CACC,CAAC,CAEV,CAGA,cAAe,CAAAzC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}
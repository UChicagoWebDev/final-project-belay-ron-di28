{"ast":null,"code":"var _jsxFileName = \"/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ChannelList from './ChannelList';\nimport MessageList from './MessageList';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentChannel, setCurrentChannel] = useState('');\n\n  // Sample messages data. In a real app, consider fetching messages based on the current channel\n  const sampleMessages = {\n    // Assuming channel.id is used as the key\n    1: ['Welcome to Channel 1!', 'Message 2 in Channel 1'],\n    2: ['Welcome to Channel 2!', 'Message 2 in Channel 2']\n    // Add more channels as needed\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n      setCurrentChannel: setCurrentChannel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n      messages: sampleMessages[currentChannel] || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WRbLZ4AAJZl9XzhDXEnOBcpe70M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ChannelList","MessageList","jsxDEV","_jsxDEV","App","_s","currentChannel","setCurrentChannel","sampleMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","messages","_c","$RefreshReg$"],"sources":["/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ChannelList from './ChannelList';\nimport MessageList from './MessageList';\nimport './App.css'\n\n\n\nfunction App() {\n  const [currentChannel, setCurrentChannel] = useState('');\n\n  // Sample messages data. In a real app, consider fetching messages based on the current channel\n  const sampleMessages = {\n    // Assuming channel.id is used as the key\n    1: ['Welcome to Channel 1!', 'Message 2 in Channel 1'],\n    2: ['Welcome to Channel 2!', 'Message 2 in Channel 2'],\n    // Add more channels as needed\n  };\n\n  return (\n    <div className=\"app\">\n      <ChannelList setCurrentChannel={setCurrentChannel} />\n      {/* Ensure messages are displayed for the current channel. Adjust as needed for real data fetching */}\n      <MessageList messages={sampleMessages[currentChannel] || []} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAO,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIlB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA,MAAMS,cAAc,GAAG;IACrB;IACA,CAAC,EAAE,CAAC,uBAAuB,EAAE,wBAAwB,CAAC;IACtD,CAAC,EAAE,CAAC,uBAAuB,EAAE,wBAAwB;IACrD;EACF,CAAC;EAED,oBACEL,OAAA;IAAKM,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBP,OAAA,CAACH,WAAW;MAACO,iBAAiB,EAAEA;IAAkB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAErDX,OAAA,CAACF,WAAW;MAACc,QAAQ,EAAEP,cAAc,CAACF,cAAc,CAAC,IAAI;IAAG;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEV;AAACT,EAAA,CAlBQD,GAAG;AAAAY,EAAA,GAAHZ,GAAG;AAoBZ,eAAeA,GAAG;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
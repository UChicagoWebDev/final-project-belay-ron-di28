{"ast":null,"code":"var _jsxFileName = \"/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/MessageList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MessageList({\n  currentChannel\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const apiKey = localStorage.getItem('api_key'); // Retrieve API key from localStorage\n\n  useEffect(() => {\n    if (!currentChannel) return; // Don't fetch if no channel is selected\n\n    fetch(`/api/channels/${currentChannel}/messages`, {\n      method: 'GET',\n      headers: {\n        'API-Key': apiKey // Assuming the API key is sent as a Bearer token\n      }\n    }).then(response => response.json()).then(data => {\n      setMessages(data);\n    }).catch(error => console.error('Error fetching messages:', error));\n  }, [currentChannel]); // Dependency array: Refetch messages when currentChannel changes\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const apiKey = localStorage.getItem('api_key'); // Assuming the API key is stored in localStorage\n\n    if (!newMessage.trim()) return; // Prevent sending empty messages\n\n    try {\n      const response = await fetch(`/api/channels/${currentChannel}/messages`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}` // Assuming the API key is sent as a Bearer token\n        },\n        body: JSON.stringify({\n          message: newMessage\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to post message');\n      }\n\n      // Optionally, clear the input field on successful message post\n      setNewMessage('');\n\n      // Optionally, refetch messages for the current channel to show the new message\n      // This might require abstracting your fetch logic into a function you can call here\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-list\",\n    children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [msg.name, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), \" \", msg.body]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Write a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(MessageList, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n_c = MessageList;\nexport default MessageList;\nvar _c;\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MessageList","currentChannel","_s","messages","setMessages","apiKey","localStorage","getItem","fetch","method","headers","then","response","json","data","catch","error","console","handleSubmit","e","preventDefault","newMessage","trim","body","JSON","stringify","message","ok","Error","setNewMessage","className","children","map","msg","index","name","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/rdi28/Desktop/WebDev/FinalProject2/final-project-belay-ron-di28/app/src/MessageList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction MessageList({ currentChannel }) {\n  const [messages, setMessages] = useState([]);\n  const apiKey = localStorage.getItem('api_key'); // Retrieve API key from localStorage\n\n  useEffect(() => {\n    if (!currentChannel) return; // Don't fetch if no channel is selected\n\n    fetch(`/api/channels/${currentChannel}/messages`, {\n      method: 'GET',\n      headers: {\n        'API-Key': apiKey // Assuming the API key is sent as a Bearer token\n      },\n    })\n    .then(response => response.json())\n    .then(data => {\n      setMessages(data);\n    })\n    .catch(error => console.error('Error fetching messages:', error));\n  }, [currentChannel]); // Dependency array: Refetch messages when currentChannel changes\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const apiKey = localStorage.getItem('api_key'); // Assuming the API key is stored in localStorage\n\n    if (!newMessage.trim()) return; // Prevent sending empty messages\n\n    try {\n      const response = await fetch(`/api/channels/${currentChannel}/messages`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`, // Assuming the API key is sent as a Bearer token\n        },\n        body: JSON.stringify({ message: newMessage }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to post message');\n      }\n\n      // Optionally, clear the input field on successful message post\n      setNewMessage('');\n\n      // Optionally, refetch messages for the current channel to show the new message\n      // This might require abstracting your fetch logic into a function you can call here\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n\n\n\n\n  return (\n    <div className=\"message-list\">\n      {messages.map((msg, index) => (\n        <div key={index}>\n          <strong>{msg.name}:</strong> {msg.body}\n        </div>\n      ))}\n      <form onSubmit={handleSubmit} className=\"message-form\">\n        <input\n          type=\"text\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          placeholder=\"Write a message...\"\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default MessageList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}